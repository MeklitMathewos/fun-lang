parse:
  ast:
    - type: proc_definition
      name:
        type: identifier
        value: main
        text: main
        offset: 5
        lineBreaks: 0
        line: 1
        col: 6
      parameters: []
      body:
        - type: call_expression
          fun_name:
            type: identifier
            value: print
            text: print
            offset: 18
            lineBreaks: 0
            line: 2
            col: 5
          arguments:
            - type: string_literal
              value: 'Hello, world!'
              text: '"Hello, world!"'
              offset: 24
              lineBreaks: 0
              line: 2
              col: 11
check: []
generate:
  js: |-
    async function main() {
        print("Hello, world!");
    }

    main().catch(err => console.log(err.message));

    // Built-in Functions:

    function print(...args) {
        console.log(...args);
    }

    function pop(array) {
        return array.pop();
    }

    function push(array, item) {
        return array.push(item);
    }

    function concat(one, other) {
        return one.concat(other);
    }

    function map(fn, arr) {
        return arr.map(fn);
    }

    function filter(fn, arr) {
        return arr.filter(fn);
    }

    function reduce(fn, initValue, arr) {
        return arr.reduce(fn, initValue);
    }

    function sqrt(num) {
        return Math.sqrt(num);
    }

    function sqr(num) {
        return num * num;
    }
exec:
  stdout: |
    Hello, world!
  stderr: ''
